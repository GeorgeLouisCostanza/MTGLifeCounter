package lifecounter.ui;

import lifecounter.model.CounterType;
import lifecounter.model.FreeForAllGame;
import lifecounter.model.Game;
import lifecounter.model.GameOption;
import lifecounter.model.PlanechaseGameOption;
import lifecounter.model.Player;
import lifecounter.model.TeamGame;
import lifecounter.model.TwoHeadedGiantGame;
import android.app.Dialog;
import android.content.Context;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.RadioGroup.OnCheckedChangeListener;

public class StartGameDialog extends Dialog implements OnClickListener {

	private final RadioButton oneVsOne;
	private final RadioButton allVsAll;
	private final RadioButton teamMatch;
	private final RadioButton twoHeaded;
	
	private final CheckBox planechase;

	private final EditText allVsAllPlayers;
	private final EditText twoHeadedPlayers;
	private final EditText teamPlayersLeft;
	private final EditText teamPlayersRight;
	private final Button startGame;

	private StartGameListener[] listener;

	private class ViewContainer {
		private View[] views;

		public ViewContainer(View... views) {
			this.views = views;
		}

		public void setVisibility(int flag) {
			for (View v : views)
				v.setVisibility(flag);
		}
	}

	public StartGameDialog(Context c, StartGameListener... listener) {
		super(c);
		setContentView(R.layout.start_game_dialog);
		getWindow().setLayout(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
		setTitle(R.string.start_title);
		setCancelable(true);
		
		oneVsOne = (RadioButton) findViewById(R.id.radioButtonOneVsOne);
		allVsAll = (RadioButton) findViewById(R.id.radioButtonAllVsAll);
		teamMatch = (RadioButton) findViewById(R.id.radioButtonStartTeamMatch);
		twoHeaded = (RadioButton) findViewById(R.id.radioButtonTwoHeadedGiant);

		planechase = (CheckBox) findViewById(R.id.checkBoxPlanechase);
		
		allVsAllPlayers = (EditText) findViewById(R.id.editTextStartAllVsAllPlayers);
		teamPlayersLeft = (EditText) findViewById(R.id.editTextStartTeamPlayersLeft);
		teamPlayersRight = (EditText) findViewById(R.id.editTextStartTeamPlayersRight);
		twoHeadedPlayers = (EditText) findViewById(R.id.editTextStartTwoHeadedGiantPlayers);

		final ViewContainer allVsAllCont = new ViewContainer(allVsAllPlayers,
				findViewById(R.id.textViewStartAllVsAllPlayers));
		final ViewContainer teamMatchCont = new ViewContainer(teamPlayersLeft, teamPlayersRight,
				findViewById(R.id.textViewStartTeamPlayers));
		final ViewContainer twoHeadedCont = new ViewContainer(twoHeadedPlayers,
				findViewById(R.id.textViewStartTwoHeadedGiantPlayers));

		final ViewContainer[] conts = new ViewContainer[] { new ViewContainer(), allVsAllCont,
				teamMatchCont, twoHeadedCont };

		setRadioButtonVisibility(conts, 0);

		RadioGroup radgrp = (RadioGroup) findViewById(R.id.RadioGroupStartGame);
		radgrp.setOnCheckedChangeListener(new OnCheckedChangeListener() {

			public void onCheckedChanged(RadioGroup arg0, int arg1) {

				switch (arg1) {
				case R.id.radioButtonOneVsOne:
					setRadioButtonVisibility(conts, 0);
					break;
				case R.id.radioButtonAllVsAll:
					setRadioButtonVisibility(conts, 1);
					break;
				case R.id.radioButtonStartTeamMatch:
					setRadioButtonVisibility(conts, 2);
					break;
				case R.id.radioButtonTwoHeadedGiant:
					setRadioButtonVisibility(conts, 3);
				}
			}
		});

		this.listener = listener;

		startGame = (Button) findViewById(R.id.buttonStartGame);
		startGame.setOnClickListener(this);

	}

	private static void setRadioButtonVisibility(ViewContainer[] conts, int checked) {
		for (int i = 0; i < conts.length; i++) {
			if (i == checked)
				conts[i].setVisibility(View.VISIBLE);
			else
				conts[i].setVisibility(View.GONE);
		}
	}

	private static interface GameOptionSelecter {
		public boolean isSelected();
		public GameOption getGameOption();
	}
	
	private GameOptionSelecter[] GAME_OPTIONS = new GameOptionSelecter[] {
		new GameOptionSelecter() {
			public boolean isSelected() {				
				return planechase.isChecked();
			}
			public GameOption getGameOption() {				
				return new PlanechaseGameOption();
			}
			
		}
	};
	
	interface StartGameListener {
		public void start(Game g);
	}

	private void notifyListeners(Game g) {
		for (StartGameListener gl : listener)
			gl.start(g);
	}

	public void onClick(View v) {

		Game result = null;

		if (v.equals(startGame)) {
			if (oneVsOne.isChecked()) {
				result = new TeamGame(new Player("Player 1"), new Player("Player 2"));
			} else if (allVsAll.isChecked()) {
				int count = Integer.parseInt(allVsAllPlayers.getText().toString());

				Player[] players = new Player[count];

				for (int i = 1; i <= count; i++) {
					players[i - 1] = new Player("Player " + Integer.toString(i));
				}

				result = new FreeForAllGame(players);
			} else if (teamMatch.isChecked()) {
				final int leftCount = Integer.parseInt(teamPlayersLeft.getText().toString());
				final int rightCount = Integer.parseInt(teamPlayersRight.getText().toString());

				final Player[] playersLeft = new Player[leftCount];
				final Player[] playersRight = new Player[rightCount];

				for (int i = 1; i <= leftCount; i++) {
					playersLeft[i - 1] = new Player("Player " + Integer.toString(i));
				}
				for (int i = leftCount + 1; i <= leftCount + rightCount; i++) {
					playersRight[i - 1 - leftCount] = new Player("Player " + Integer.toString(i));
				}

				result = new TeamGame(CounterType.DEFAULT, playersLeft, playersRight);
			} else if (twoHeaded.isChecked()) {
				result = new TwoHeadedGiantGame(Integer.parseInt(twoHeadedPlayers.getText()
						.toString()));
			}

			if (result != null) {
			
				for(GameOptionSelecter gos : GAME_OPTIONS) {
					if(gos.isSelected())
						result = gos.getGameOption().useOn(result);
				}
				
				Log.d("StartGameDialog", result.getClass().toString());
				
				notifyListeners(result);
				
			}

			dismiss();

		}
	}
}
